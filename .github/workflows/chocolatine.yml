name: chocolatine
env:
  EXECUTABLES: "amazed"
  MIRROR_URL: ""
on:
  pull_request:
    types: [open, reopen]
    branches-ignore:
      - 'ga-ignore**'
  push:
    branches-ignore:
      - 'ga-ignore**'

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - uses: actions/checkout@v4
      - name: "coding-style"
        run: |
          check.sh $(pwd) $(pwd)
          STYLE_ERRORS=$(cat $(pwd)/coding-style-reports.log)
          while IFS= read -r LINE; do
            IFS=':' read -r -a TEMP <<< "$LINE"
            ELEMENTS=()
            for item in "${TEMP[@]}"; do
              IFS=' ' read -r -a SUB_ELEMENTS <<< "$item"
              for sub_item in "${SUB_ELEMENTS[@]}"; do
                ELEMENTS+=("$sub_item")
              done
            done
            echo "::error title=${ELEMENTS[2]} coding style error,file=${ELEMENTS[0]},line=${ELEMENTS[1]}::${ELEMENTS[3]}"
          done <<< "$STYLE_ERRORS"
          FILE="$(pwd)"
          FILE+="/coding-style-reports.log"
          if [ -s $FILE ]
          then
            exit 1
          else
            echo "No Style Errors"
          fi

  check_program_compilation:
    needs: check_coding_style
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    steps:
      - uses: actions/checkout@v4
      - name: make
        timeout-minutes: 2
        run: make
      - name: make clean
        run: make fclean
      - name: verify executables
        run: |
          for file in $EXECUTABLES; do
            if [ ! -x "$file" ]; then
              echo "::error file=$file::File does not exist or is not executable"
              exit 1
            fi
          done

  run_tests:
    needs: check_program_compilation
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    steps:
      - uses: actions/checkout@v4
      - name: run_tests
        timeout-minutes: 2
        run: make tests-run

  push_to_mirror:
    needs: run_tests
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch_depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_rep_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}
